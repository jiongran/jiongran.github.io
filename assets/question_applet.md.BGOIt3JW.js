import{_ as i,c as l,o as s,a4 as a}from"./chunks/framework.Xe-pYyW9.js";const u=JSON.parse('{"title":"小程序","description":"","frontmatter":{},"headers":[],"relativePath":"question/applet.md","filePath":"question/applet.md","lastUpdated":null}'),e={name:"question/applet.md"},t=a(`<h1 id="小程序" tabindex="-1">小程序 <a class="header-anchor" href="#小程序" aria-label="Permalink to &quot;小程序&quot;">​</a></h1><h2 id="小程序特点" tabindex="-1">小程序特点 <a class="header-anchor" href="#小程序特点" aria-label="Permalink to &quot;小程序特点&quot;">​</a></h2><ol><li>体积小，压缩包的体积不能大于 2M</li><li>没有 DOM 对象</li><li>基于组件化开发</li><li>小程序环境不同于浏览器环境 <ol><li>浏览器环境中全局对象： window</li><li>小程序环境中全局对象：wx</li><li>小程序环境中没有 window 对象</li></ol></li></ol><h2 id="小程序适配" tabindex="-1">小程序适配 <a class="header-anchor" href="#小程序适配" aria-label="Permalink to &quot;小程序适配&quot;">​</a></h2><ol><li>小程序适配单位： rpx(responsive px) 响应式单位</li><li>小程序中规定所有的机型中页面宽度都是 750rpx</li><li>iphone6: 1 物理像素 = 0.5px = 1rpx || 1px = 2rpx</li><li>小程序底层已经做了 viewport 适配</li></ol><h2 id="小程序相关语法" tabindex="-1">小程序相关语法 <a class="header-anchor" href="#小程序相关语法" aria-label="Permalink to &quot;小程序相关语法&quot;">​</a></h2><ol><li>数据绑定 <ol><li>单项数据流: Model 指向 view</li><li>修改状态数据： this.setData() 同步行为</li><li>页面中的数据均来自于 data 中，使用 data 中的数据的时候记住使用表达式{</li></ol></li><li>事件绑定 <ol><li>事件分类： 冒泡事件 || 非冒泡事件</li><li>绑定的方式： bind + 事件名 || catch + 事件名</li></ol></li><li>路由跳转 <ol><li>wx.navigateTo() || wx.redirectTo()</li></ol></li><li>本地存储 <ol><li>语法： <ol><li>wx.setStorage() || wx.setStorageSync()</li><li>wx.getStorage() || wx.getStorageSync()</li></ol></li><li>注意点 <ol><li>单个 key 上限是 1M</li><li>整体上限是 10M</li></ol></li></ol></li><li>全局传参 app.js 中可定义全局参数 globalData</li></ol><h2 id="向事件对象传参" tabindex="-1">向事件对象传参 <a class="header-anchor" href="#向事件对象传参" aria-label="Permalink to &quot;向事件对象传参&quot;">​</a></h2><ol><li>语法 <ol><li>id=value</li><li>data-key=value</li></ol></li><li>获取 <ol><li>id: event.target.id || event.currentTarget.id</li><li>data-key: event.target.dataset.key || event.currentTarget.dataset.key</li></ol></li><li>使用场景 <ol><li>id：通常需要向 event 对象传递单一且唯一的标识</li><li>data-key: 需要向 event 对象传递多个标识数据</li></ol></li></ol><h2 id="小程序获取用户唯一标识-openid" tabindex="-1">小程序获取用户唯一标识（openId） <a class="header-anchor" href="#小程序获取用户唯一标识-openid" aria-label="Permalink to &quot;小程序获取用户唯一标识（openId）&quot;">​</a></h2><ol><li>客户端先通过 wx.login获取 code</li><li>wx.request()发送 code 给服务器</li><li>服务器端发送请求携带参数(code, appSecret（开发密钥）, appId)给微信服务器获取 openId</li><li>微信返回 openId 给服务器后，服务器进行加密再返回给前端</li><li>前端进行本地储存，下次发送请求时携带参数</li></ol><h2 id="小程序支付流程" tabindex="-1">小程序支付流程 <a class="header-anchor" href="#小程序支付流程" aria-label="Permalink to &quot;小程序支付流程&quot;">​</a></h2><ol><li>用户在小程序客服端下单(包含用户及商品信息)</li><li>小程序客户端发送下单支付请求给商家服务器</li><li>商家服务器同微信服务器对接获取唯一标识 openID</li><li>商家服务器根据 openId 生成商户订单(包含商户信息)</li><li>商家服务器发送请求调用统一下单 API 获取预支付订单信息</li><li>商家对预支付信息签名加密后返回给小程序客户端</li><li>用户确认支付（鉴权调起支付）</li><li>微信服务器返回支付结果给小程序客户端</li><li>微信服务器推送支付结果给商家服务器端</li></ol><h1 id="小程序相关问题" tabindex="-1">小程序相关问题 <a class="header-anchor" href="#小程序相关问题" aria-label="Permalink to &quot;小程序相关问题&quot;">​</a></h1><ol><li>Iphone6 的 dpr 为多少？Iphone6Plus 比 Iphone6 显示图像清晰吗？ 视网膜屏幕是分辨率超过人眼识别极限的高分辨率屏幕，Iphone4 的 dpr = 2; 人类肉眼分 辨的极限</li><li>生命周期函数实际测试和官网描述有差</li><li>wx.setStorage()，单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB</li><li>性能优化 一个页面一次只有一个 video 标签，其余的使用 image 代替</li><li>请求相关 小程序为了安全起见只支持 Https 请求 wx.request 最大并发限制 10 个</li><li>如何使用组件 先创建组件，在对应的 json 文件下设置 component: true 到使用组件页面的 json 文件中，注册组件填写相应的路径</li><li>使用 npm 包 下载后，勾选使用 npm 模块，再构建 npm，会将 node_modules 中的包打 包到 miniprogram_npm 中</li><li>分包相关 分包后可解决 2M 限制，并且能分包加载内容，提高性能 分包后单个包的体积不能大于 2M，所有包的体积不能大于 16M</li><li>常规分包 加载小程序的时候先加载主包，当需要访问分包的页面时候才加载分包内 容分包的页面可以访问主包的文件，数据，图片等资源</li><li>独立分包 独立分包可单独访问分包的内容，不需要下载主 包独立分包不能依赖主包或者其他包的内容 通常某些页面和当前小程序的其他页面关联不大的时候可进行独立分包，如：临时加 的广告页 || 活动页</li><li>分包预下载</li></ol><blockquote><p>在加载当前包的时候可以设置预下载其他的包缩短用户等待时间，提高用户体验</p></blockquote><ol start="9"><li>开发相关</li></ol><blockquote><p>setData 行为始终是同步的 H5 中实现滑块功能，推荐大家使用：better-scroll</p></blockquote><h1 id="移动端" tabindex="-1">移动端 <a class="header-anchor" href="#移动端" aria-label="Permalink to &quot;移动端&quot;">​</a></h1><h2 id="移动端基础知识" tabindex="-1">移动端基础知识 <a class="header-anchor" href="#移动端基础知识" aria-label="Permalink to &quot;移动端基础知识&quot;">​</a></h2><ul><li>1 英寸(inch) = 2.54 厘米(cm)</li><li>IPhone 6 的屏幕分辨率为 750 * 1334 设备独立像素为 375 * 667</li><li>物理像素：由屏幕制造商决定，屏幕生产后无法修改</li><li>css 像素：单位是 px，它是为 Web 开发者创造的</li><li>设备独立像素的出现，使得即使在【高清屏】下，也可以让元素有正常的尺寸，让代码不受到设备的影响，它是设备厂商根据屏幕特性设置的，无法更改。 1个位图像素对应 1 个物理像素，图片才能得到完美清晰的展示</li><li>pc 端视口：默认宽度和浏览器窗口的宽度一致，也被称为初始包含块document.documentElement.clientWidth</li><li>移动端事件 <ul><li>触发事件 <ul><li>touchstart 元素上触摸开始时触发</li><li>touchmove 元素上触摸移动时触发</li><li>touchend 手指从元素上离开时触发</li><li>touchcancel 触摸被打断时触发</li></ul></li><li>执行顺序 <ul><li>touchstart</li><li>touchend</li><li>click，浏览器在 click 后会等待约 300ms 去判断用户是否有双击行为，如果 300ms 内没有再一次 click，那么就判定这是一次单击行为</li></ul></li><li>点击穿透 -(touch 事件结束后会默认触发元素的 click 事件) <ul><li>阻止默认行为</li><li>使背后元素不具备 click 特性，用 touchXxxx 代替 click</li><li>让背后的元素暂时失去 click 事件，300 毫秒左右再复原，属性 pointer-events:none;</li><li>让隐藏的元素延迟 300 毫秒左右再隐藏</li></ul></li></ul></li></ul><h2 id="移动端面试题" tabindex="-1">移动端面试题 <a class="header-anchor" href="#移动端面试题" aria-label="Permalink to &quot;移动端面试题&quot;">​</a></h2><ul><li>移动端视口: <ul><li>布局视口：一般是 980px 左右，布局视口经过压缩后，横向的宽度用 css 像素表达就不再是 375px 了，而是 980px</li><li>视觉视口：用户可见的区域，它的绝对宽度永远和设备屏幕一样宽</li><li>理想视口：布局视口宽度 与 屏幕等宽（设备独立像素），靠 meta 标签实现 <blockquote><meta name="viewport" content="width=device-width,initial-scale=1.0"></blockquote></li></ul></li><li>移动端适配 <ul><li>viewport 适配 <ul><li>方法：拿到设计稿之后，设置布局视口宽度为设计稿宽度，然后直接按照设计稿给宽高进行布局即可。</li></ul><blockquote><p>一般适用于：计图稿宽度 &lt; 375</p></blockquote></li><li>rem 适配 <ul><li>百度 <ol><li>设置完美视口</li><li>通过 js 设置根字体大小 = ( 当前设备横向独立像素值 *100) / 设计稿宽度</li><li>编写样式时，直接以 rem 为单位，值为：设计值 / 100</li><li>增加 JS 代码进行实时适配</li></ol></li><li>淘宝 唯品会 <ol><li>设置完美视口</li><li>通过 js 设置根字体大小 = 当前设备横向独立像素值 / 10</li><li>编写样式时，直接以 rem 为单位，值为：设计值 / (设计稿宽度 / 10)</li><li>增加 JS 代码进行实时适配</li></ol></li></ul></li><li>vw 适配 <ul><li>vw 和 vh 是两个相对单位</li></ul><blockquote><p>1vw = 等于布局视口宽度的 1% 1vh = 等于布局视口高度的 1%</p></blockquote></li></ul></li><li>1px 物理像素边框 <ul><li>媒体查询</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-min-device-pixel-ratio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        #demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-webkit-min-device-pixel-ratio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        #demo2::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scaleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><ul><li>修改可视窗口 <ol><li>rem 页面布局</li><li>元素的边框设置为 1px</li><li>通过 viewport 中的 initial-scale 将布局视口扩大 n 倍，这样页面元素就比原来缩小了 n 倍</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;meta[name=viewport]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.devicePixelRatio</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;content&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;width=device-width,initial-scale=&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scale);</span></span></code></pre></div><ol start="4"><li>重新设置根元素字体<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.documentElement.style.fontSize);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.documentElement.style.fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.devicePixelRatio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span></span></code></pre></div></li></ol></li></ul></li></ul>`,23),n=[t];function h(p,k,o,r,d,c){return s(),l("div",null,n)}const g=i(e,[["render",h]]);export{u as __pageData,g as default};
